{"version":3,"sources":["main.js","processor.js","applier.js","intervalMaker.js","solver.js","tester.js","welder.js"],"names":["intalg","process","array","identify","map","item","index","processedItem","begin","end","type","id","apply","obj","solution","insert","length","ruler","JSON","parse","stringify","segmentIndex","findIndex","segment","removeSegment","splice","push","makeInterval","solve","conflict","interval","name","typeMismatch","create","Error","message","about","equal","hit","symbol","cover","coverLeft","dummy","coverRight","inside","insideLeft","insideRight","overlapLeft","overlapRight","outsideLeft","outsideRight","tests","names","Object","keys","test","some","weld","weldedRuler","shift","reduce","accumulator","intervals","sort","sortRuler","a","b","unshift"],"mappings":";;;;AAAA,IAAIA,SAAU,YAAY;AAC1B;;ACDe,WAASC,OAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;;AAEhD,WAAOD,MAAME,GAAN,CAAU,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;;AAEtC,UAAMC,gBAAgB,EAAEC,OAAOH,KAAKG,KAAd,EAAqBC,KAAKJ,KAAKI,GAA/B,EAAoCC,MAAML,KAAKK,IAA/C,EAAtB;;AAEA,UAAIP,QAAJ,EAAc;;AAEZI,sBAAcI,EAAd,GAAmBL,KAAnB;AAED,OAJD,MAIO;;AAEL,eAAOC,cAAcI,EAArB;AAED;;AAED,aAAOJ,aAAP;AAED,KAhBM,CAAP;AAkBD;;AClBc,WAASK,KAAT,CAAgBC,GAAhB,EAAqB;;AAElC,QAAIA,IAAIC,QAAJ,CAAaC,MAAb,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC,OAAOH,IAAII,KAAX;;AAEtC,QAAMH,WAAWI,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeP,IAAIC,QAAnB,CAAX,CAAjB;AACA,QAAMG,QAAQhB,QAAQY,IAAII,KAAZ,EAAmB,IAAnB,CAAd;;AAEA,QAAMI,eAAeJ,MAAMK,SAAN,CAAgB,UAAUC,OAAV,EAAmB;;AAEtD,aAAOA,QAAQZ,EAAR,KAAeG,SAASU,aAA/B;AAED,KAJoB,CAArB;;AAMA,QAAIH,eAAe,CAAC,CAApB,EAAuB;;AAErBJ,YAAMQ,MAAN,CAAaJ,YAAb,EAA2B,CAA3B;AAED;;AAEDJ,UAAMS,IAAN,iCAAcZ,SAASC,MAAvB;;AAEA,WAAOE,KAAP;AAED;;ACzBc,WAASU,YAAT,CAAuBnB,KAAvB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;;AAEtD,WAAO,EAAEF,YAAF,EAASC,QAAT,EAAcC,UAAd,EAAP;AAED;;ACFc,WAASkB,KAAT,CAAgBC,QAAhB,EAA0B;AAAA,QAE/BC,QAF+B,GAEWD,QAFX,CAE/BC,QAF+B;AAAA,QAErBC,IAFqB,GAEWF,QAFX,CAErBE,IAFqB;AAAA,QAEfR,OAFe,GAEWM,QAFX,CAEfN,OAFe;AAAA,QAENS,YAFM,GAEWH,QAFX,CAENG,YAFM;;AAGvC,QAAMlB,WAAW,EAAEmB,QAAQ,EAAV,EAAclB,QAAQ,EAAtB,EAA0BS,eAAe,KAAzC,EAAjB;;AAEA,QAAIQ,YAAJ,EAAkB;;AAEhBlB,eAASU,aAAT,GAAyBD,QAAQZ,EAAjC;AAED;;AAED,YAAQoB,IAAR;AACE,WAAK,OAAL;AACE,YAAIC,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6BsB,SAASrB,GAAtC,EAA2CqB,SAASpB,IAApD,CADF;AAID;AACD;;AAEF,WAAK,OAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4Be,QAAQd,GAApC,EAAyCqB,SAASpB,IAAlD,CADF;AAID;AACDI,iBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6Be,QAAQf,KAArC,EAA4CsB,SAASpB,IAArD,CADF,EAEEiB,aAAaJ,QAAQd,GAArB,EAA0BqB,SAASrB,GAAnC,EAAwCqB,SAASpB,IAAjD,CAFF;AAIA;;AAEF,WAAK,WAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6Be,QAAQd,GAArC,EAA0CqB,SAASpB,IAAnD,CADF;AAID;AACDI,iBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaJ,QAAQd,GAArB,EAA0BqB,SAASrB,GAAnC,EAAwCqB,SAASpB,IAAjD,CADF;AAGA;;AAEF,WAAK,YAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4BsB,SAASrB,GAArC,EAA0CqB,SAASpB,IAAnD,CADF;AAID;AACDI,iBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6Be,QAAQf,KAArC,EAA4CsB,SAASpB,IAArD,CADF;AAGA;;AAEF,WAAK,QAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6BsB,SAASrB,GAAtC,EAA2CqB,SAASpB,IAApD,CADF;AAGAI,mBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4BsB,SAAStB,KAArC,EAA4Ce,QAAQb,IAApD,CADF,EAEEiB,aAAaG,SAASrB,GAAtB,EAA2Bc,QAAQd,GAAnC,EAAwCc,QAAQb,IAAhD,CAFF;AAKD;AACD;;AAEF,WAAK,YAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6BsB,SAASrB,GAAtC,EAA2CqB,SAASpB,IAApD,CADF;AAGAI,mBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaG,SAASrB,GAAtB,EAA2Bc,QAAQd,GAAnC,EAAwCc,QAAQb,IAAhD,CADF;AAID;AACD;;AAEF,WAAK,aAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6BsB,SAASrB,GAAtC,EAA2CqB,SAASpB,IAApD,CADF;AAGAI,mBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4BsB,SAAStB,KAArC,EAA4Ce,QAAQb,IAApD,CADF;AAID;AACD;;AAEF,WAAK,aAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4BsB,SAASrB,GAArC,EAA0CqB,SAASpB,IAAnD,CADF;AAGAI,mBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaG,SAASrB,GAAtB,EAA2Bc,QAAQd,GAAnC,EAAwCc,QAAQb,IAAhD,CADF;AAID;AACDI,iBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6Be,QAAQf,KAArC,EAA4CsB,SAASpB,IAArD,CADF;AAGA;;AAEF,WAAK,cAAL;AACE,YAAIsB,YAAJ,EAAkB;;AAEhBlB,mBAASC,MAAT,CAAgBW,IAAhB,CACEC,aAAaG,SAAStB,KAAtB,EAA6Be,QAAQd,GAArC,EAA0CqB,SAASpB,IAAnD,CADF;AAGAI,mBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaJ,QAAQf,KAArB,EAA4BsB,SAAStB,KAArC,EAA4Ce,QAAQb,IAApD,CADF;AAID;AACDI,iBAASmB,MAAT,CAAgBP,IAAhB,CACEC,aAAaJ,QAAQd,GAArB,EAA0BqB,SAASrB,GAAnC,EAAwCqB,SAASpB,IAAjD,CADF;AAGA;AACF;AACE,cAAM,IAAIwB,KAAJ,CAAU,EAAEC,qCAAmCJ,IAArC,EAAV,CAAN;;AA3HJ;;AA+HA,WAAOjB,QAAP;AAED;;AC9ID,MAAMsB,QAAQ;AACZC,WAAO,EAAEC,KAAK,IAAP,EAAaP,MAAM,OAAnB,EAA4BQ,QAAQ,sBAApC,EADK;AAEZC,WAAO,EAAEF,KAAK,IAAP,EAAaP,MAAM,OAAnB,EAA4BQ,QAAQ,0BAApC,EAFK;AAGZE,eAAW;AACTH,WAAK,IADI;AAETP,YAAM,WAFG;AAGTQ,cAAQ,0BAHC;AAITG,aAAO;AAJE,KAHC;AASZC,gBAAY;AACVL,WAAK,IADK;AAEVP,YAAM,YAFI;AAGVQ,cAAQ;AAHE,KATA;AAcZK,YAAQ,EAAEN,KAAK,IAAP,EAAaP,MAAM,QAAnB,EAA6BQ,QAAQ,0BAArC,EAdI;AAeZM,gBAAY;AACVP,WAAK,IADK;AAEVP,YAAM,YAFI;AAGVQ,cAAQ;AAHE,KAfA;AAoBZO,iBAAa;AACXR,WAAK,IADM;AAEXP,YAAM,aAFK;AAGXQ,cAAQ;AAHG,KApBD;AAyBZQ,iBAAa;AACXT,WAAK,IADM;AAEXP,YAAM,aAFK;AAGXQ,cAAQ;AAHG,KAzBD;AA8BZS,kBAAc;AACZV,WAAK,IADO;AAEZP,YAAM,cAFM;AAGZQ,cAAQ;AAHI,KA9BF;AAmCZU,iBAAa;AACXX,WAAK,KADM;AAEXP,YAAM,aAFK;AAGXQ,cAAQ;AAHG,KAnCD;AAwCZW,kBAAc;AACZZ,WAAK,KADO;AAEZP,YAAM,cAFM;AAGZQ,cAAQ;AAHI;AAxCF,GAAd;;AA+CA,MAAMY,QAAQ;AACZd,SADY,iBACLP,QADK,EACKP,OADL,EACc;;AAExB,aAAOO,SAAStB,KAAT,KAAmBe,QAAQf,KAA3B,IAAoCsB,SAASrB,GAAT,KAAiBc,QAAQd,GAApE;AAED,KALW;AAMZ+B,SANY,iBAMLV,QANK,EAMKP,OANL,EAMc;;AAExB,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IAAkCsB,SAASrB,GAAT,GAAec,QAAQd,GAAhE;AAED,KAVW;AAWZgC,aAXY,qBAWDX,QAXC,EAWSP,OAXT,EAWkB;;AAE5B,aAAOO,SAAStB,KAAT,KAAmBe,QAAQf,KAA3B,IAAoCsB,SAASrB,GAAT,GAAec,QAAQd,GAAlE;AAED,KAfW;AAgBZkC,cAhBY,sBAgBAb,QAhBA,EAgBUP,OAhBV,EAgBmB;;AAE7B,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IAAkCsB,SAASrB,GAAT,KAAiBc,QAAQd,GAAlE;AAED,KApBW;AAqBZmC,UArBY,kBAqBJd,QArBI,EAqBMP,OArBN,EAqBe;;AAEzB,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IAAkCsB,SAASrB,GAAT,GAAec,QAAQd,GAAhE;AAED,KAzBW;AA0BZoC,cA1BY,sBA0BAf,QA1BA,EA0BUP,OA1BV,EA0BmB;;AAE7B,aAAOO,SAAStB,KAAT,KAAmBe,QAAQf,KAA3B,IAAoCsB,SAASrB,GAAT,GAAec,QAAQd,GAAlE;AAED,KA9BW;AA+BZqC,eA/BY,uBA+BChB,QA/BD,EA+BWP,OA/BX,EA+BoB;;AAE9B,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IAAkCsB,SAASrB,GAAT,KAAiBc,QAAQd,GAAlE;AAED,KAnCW;AAoCZsC,eApCY,uBAoCCjB,QApCD,EAoCWP,OApCX,EAoCoB;;AAE9B,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IACLsB,SAASrB,GAAT,GAAec,QAAQf,KADlB,IAELsB,SAASrB,GAAT,GAAec,QAAQd,GAFlB,IAGLqB,SAASrB,GAAT,GAAec,QAAQf,KAHzB;AAKD,KA3CW;AA4CZwC,gBA5CY,wBA4CElB,QA5CF,EA4CYP,OA5CZ,EA4CqB;;AAE/B,aAAOO,SAAStB,KAAT,GAAiBe,QAAQf,KAAzB,IACLsB,SAASrB,GAAT,GAAec,QAAQd,GADlB,IAELqB,SAAStB,KAAT,GAAiBe,QAAQd,GAFpB,IAGLqB,SAASrB,GAAT,GAAec,QAAQd,GAHzB;AAKD;AAnDW,GAAd;;AAsDA,MAAM2C,QAAQC,OAAOC,IAAP,CAAYH,KAAZ,CAAd;;AAEA,WAAwBI,IAAxB,CAA8B1C,GAA9B,EAAmC;;AAEjC,QAAMiB,WAAWZ,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeP,IAAIiB,QAAnB,CAAX,CAAjB;AACA,QAAMP,UAAUL,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeP,IAAIU,OAAnB,CAAX,CAAhB;;AAEA,QAAIM,WAAW,KAAf;AACAuB,UAAMI,IAAN,CAAW,UAAUzB,IAAV,EAAgB;;AAEzB,UAAMO,MAAMa,MAAMpB,IAAN,EAAYD,QAAZ,EAAsBP,OAAtB,CAAZ;AACA,UAAIe,GAAJ,EAAS;;AAEPT,mBAAW;AACTC,4BADS;AAETC,oBAFS;AAGTR,0BAHS;AAITS,wBAAcF,SAASpB,IAAT,KAAkBa,QAAQb,IAJ/B;AAKT0B,iBAAOA,MAAML,IAAN;AALE,SAAX;AAQD;AACD,aAAOO,GAAP;AAED,KAhBD;AAiBA,WAAOT,QAAP;AAED;;AC9Hc,WAAS4B,IAAT,CAAe5C,GAAf,EAAoB;;AAEjC,QAAMI,QAAQhB,QAAQY,IAAII,KAAZ,CAAd;AACA,QAAMyC,cAAc,CAAEzC,MAAM0C,KAAN,EAAF,CAApB;;AAEA1C,UAAM2C,MAAN,CACE,UAAUC,WAAV,EAAuB/B,QAAvB,EAAiC;;AAE/B,UAAMP,UAAUsC,YAAYA,YAAY7C,MAAZ,GAAqB,CAAjC,CAAhB;AACA,UAAIO,QAAQd,GAAR,KAAgBqB,SAAStB,KAAzB,IAAkCe,QAAQb,IAAR,KAAiBoB,SAASpB,IAAhE,EAAsE;;AAEpEa,gBAAQd,GAAR,GAAcqB,SAASrB,GAAvB;AAED,OAJD,MAIO;;AAELoD,oBAAYnC,IAAZ,CAAiBI,QAAjB;AAED;AACD,aAAO+B,WAAP;AAED,KAfH,EAgBEH,WAhBF;;AAmBA,WAAOA,WAAP;AAED;;ANtBc,WAAS1D,MAAT,CAAiBa,GAAjB,EAAsB;;AAEnC,QAAMiD,YAAY7D,QAAQY,IAAIiD,SAAZ,CAAlB;AACA,QAAI7C,QAAQhB,QAAQY,IAAII,KAAZ,EAAmB,IAAnB,CAAZ;;AAEA,QAAI6C,UAAU9C,MAAV,KAAqB,CAAzB,EAA4B;;AAE1BC,YAAM8C,IAAN,CAAW,SAASC,SAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;;AAEnC,eAAOD,EAAEzD,KAAF,GAAU0D,EAAE1D,KAAnB;AAED,OAJD;;AAMA,aAAOP,QAAQwD,KAAK,EAAExC,YAAF,EAAL,CAAR,CAAP;AAED;;AAED,QAAMa,WAAWgC,UAAUH,KAAV,EAAjB;;AAEA,QAAI9B,iBAAJ;AACAZ,UAAMuC,IAAN,CAAW,UAAUjC,OAAV,EAAmB;;AAE5BM,iBAAW0B,KAAK,EAAEzB,kBAAF,EAAYP,gBAAZ,EAAL,CAAX;AACA,aAAOM,QAAP;AAED,KALD;;AAOA,QAAIA,QAAJ,EAAc;;AAEZ,UAAMf,WAAWc,MAAMC,QAAN,CAAjB;AACAZ,cAAQL,MAAM,EAAEE,kBAAF,EAAYG,YAAZ,EAAN,CAAR;AACA6C,gBAAUK,OAAV,qCAAqBrD,SAASmB,MAA9B;AAED,KAND,MAMO;;AAELhB,YAAMS,IAAN,CAAWI,QAAX;AAED;;AAED,WAAO9B,OAAO,EAAE8D,oBAAF,EAAa7C,YAAb,EAAP,CAAP;AAED;;AAgWD,SAAOjB,MAAP;AAEC,CAjZa,EAAd","file":"intalg.js","sourcesContent":["import apply from './applier'\nimport process from './processor'\nimport solve from './solver'\nimport test from './tester'\nimport weld from './welder'\n\nexport default function intalg (obj) {\n\n  const intervals = process(obj.intervals)\n  let ruler = process(obj.ruler, true)\n\n  if (intervals.length === 0) {\n\n    ruler.sort(function sortRuler (a, b) {\n\n      return a.begin - b.begin\n\n    })\n\n    return process(weld({ ruler }))\n\n  }\n\n  const interval = intervals.shift()\n\n  let conflict\n  ruler.some(function (segment) {\n\n    conflict = test({ interval, segment })\n    return conflict\n\n  })\n\n  if (conflict) {\n\n    const solution = solve(conflict)\n    ruler = apply({ solution, ruler })\n    intervals.unshift(...solution.create)\n\n  } else {\n\n    ruler.push(interval)\n\n  }\n\n  return intalg({ intervals, ruler })\n\n}\n","export default function process (array, identify) {\n\n  return array.map(function (item, index) {\n\n    const processedItem = { begin: item.begin, end: item.end, type: item.type }\n\n    if (identify) {\n\n      processedItem.id = index\n\n    } else {\n\n      delete processedItem.id\n\n    }\n\n    return processedItem\n\n  })\n\n}\n","import process from './processor'\n\nexport default function apply (obj) {\n\n  if (obj.solution.insert.length === 0) return obj.ruler\n\n  const solution = JSON.parse(JSON.stringify(obj.solution))\n  const ruler = process(obj.ruler, true)\n\n  const segmentIndex = ruler.findIndex(function (segment) {\n\n    return segment.id === solution.removeSegment\n\n  })\n\n  if (segmentIndex > -1) {\n\n    ruler.splice(segmentIndex, 1)\n\n  }\n\n  ruler.push(...solution.insert)\n\n  return ruler\n\n}\n","export default function makeInterval (begin, end, type) {\n\n  return { begin, end, type }\n\n}\n","import makeInterval from './intervalMaker'\n\nexport default function solve (conflict) {\n\n  const { interval, name, segment, typeMismatch } = conflict\n  const solution = { create: [], insert: [], removeSegment: false }\n\n  if (typeMismatch) {\n\n    solution.removeSegment = segment.id\n\n  }\n\n  switch (name) {\n    case 'equal':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, interval.end, interval.type)\n        )\n\n      }\n      break\n\n    case 'cover':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(segment.begin, segment.end, interval.type)\n        )\n\n      }\n      solution.create.push(\n        makeInterval(interval.begin, segment.begin, interval.type),\n        makeInterval(segment.end, interval.end, interval.type)\n      )\n      break\n\n    case 'coverLeft':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, segment.end, interval.type)\n        )\n\n      }\n      solution.create.push(\n        makeInterval(segment.end, interval.end, interval.type)\n      )\n      break\n\n    case 'coverRight':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(segment.begin, interval.end, interval.type)\n        )\n\n      }\n      solution.create.push(\n        makeInterval(interval.begin, segment.begin, interval.type)\n      )\n      break\n\n    case 'inside':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, interval.end, interval.type)\n        )\n        solution.create.push(\n          makeInterval(segment.begin, interval.begin, segment.type),\n          makeInterval(interval.end, segment.end, segment.type)\n        )\n\n      }\n      break\n\n    case 'insideLeft':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, interval.end, interval.type)\n        )\n        solution.create.push(\n          makeInterval(interval.end, segment.end, segment.type)\n        )\n\n      }\n      break\n\n    case 'insideRight':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, interval.end, interval.type)\n        )\n        solution.create.push(\n          makeInterval(segment.begin, interval.begin, segment.type)\n        )\n\n      }\n      break\n\n    case 'overlapLeft':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(segment.begin, interval.end, interval.type)\n        )\n        solution.create.push(\n          makeInterval(interval.end, segment.end, segment.type)\n        )\n\n      }\n      solution.create.push(\n        makeInterval(interval.begin, segment.begin, interval.type)\n      )\n      break\n\n    case 'overlapRight':\n      if (typeMismatch) {\n\n        solution.insert.push(\n          makeInterval(interval.begin, segment.end, interval.type)\n        )\n        solution.create.push(\n          makeInterval(segment.begin, interval.begin, segment.type)\n        )\n\n      }\n      solution.create.push(\n        makeInterval(segment.end, interval.end, interval.type)\n      )\n      break\n    default:\n      throw new Error({ message: `INVALID CONFLICT NAME: ${name}` })\n\n  }\n\n  return solution\n\n}\n","const about = {\n  equal: { hit: true, name: 'equal', symbol: '<-------<\\n<-------<' },\n  cover: { hit: true, name: 'cover', symbol: '<---------<\\n <-------< ' },\n  coverLeft: {\n    hit: true,\n    name: 'coverLeft',\n    symbol: '<---------<\\n<--------< ',\n    dummy: true\n  },\n  coverRight: {\n    hit: true,\n    name: 'coverRight',\n    symbol: '<---------<\\n <--------<'\n  },\n  inside: { hit: true, name: 'inside', symbol: ' <-------< \\n<---------<' },\n  insideLeft: {\n    hit: true,\n    name: 'insideLeft',\n    symbol: '<--------< \\n<---------<'\n  },\n  insideRight: {\n    hit: true,\n    name: 'insideRight',\n    symbol: ' <--------<\\n<---------<'\n  },\n  overlapLeft: {\n    hit: true,\n    name: 'overlapLeft',\n    symbol: '<---------<\\n     <---------<'\n  },\n  overlapRight: {\n    hit: true,\n    name: 'overlapRight',\n    symbol: '     <---------<\\n<---------<'\n  },\n  outsideLeft: {\n    hit: false,\n    name: 'outsideLeft',\n    symbol: '<---------<\\n           <---------<'\n  },\n  outsideRight: {\n    hit: false,\n    name: 'outsideRight',\n    symbol: '           <---------<\\n<---------<'\n  }\n}\n\nconst tests = {\n  equal (interval, segment) {\n\n    return interval.begin === segment.begin && interval.end === segment.end\n\n  },\n  cover (interval, segment) {\n\n    return interval.begin < segment.begin && interval.end > segment.end\n\n  },\n  coverLeft (interval, segment) {\n\n    return interval.begin === segment.begin && interval.end > segment.end\n\n  },\n  coverRight (interval, segment) {\n\n    return interval.begin < segment.begin && interval.end === segment.end\n\n  },\n  inside (interval, segment) {\n\n    return interval.begin > segment.begin && interval.end < segment.end\n\n  },\n  insideLeft (interval, segment) {\n\n    return interval.begin === segment.begin && interval.end < segment.end\n\n  },\n  insideRight (interval, segment) {\n\n    return interval.begin > segment.begin && interval.end === segment.end\n\n  },\n  overlapLeft (interval, segment) {\n\n    return interval.begin < segment.begin &&\n      interval.end > segment.begin &&\n      interval.end < segment.end &&\n      interval.end > segment.begin\n\n  },\n  overlapRight (interval, segment) {\n\n    return interval.begin > segment.begin &&\n      interval.end > segment.end &&\n      interval.begin < segment.end &&\n      interval.end > segment.end\n\n  }\n}\n\nconst names = Object.keys(tests)\n\nexport default function test (obj) {\n\n  const interval = JSON.parse(JSON.stringify(obj.interval))\n  const segment = JSON.parse(JSON.stringify(obj.segment))\n\n  let conflict = false\n  names.some(function (name) {\n\n    const hit = tests[name](interval, segment)\n    if (hit) {\n\n      conflict = {\n        interval,\n        name,\n        segment,\n        typeMismatch: interval.type !== segment.type,\n        about: about[name]\n      }\n\n    }\n    return hit\n\n  })\n  return conflict\n\n}\n","import process from './processor'\n\nexport default function weld (obj) {\n\n  const ruler = process(obj.ruler)\n  const weldedRuler = [ ruler.shift() ]\n\n  ruler.reduce(\n    function (accumulator, interval) {\n\n      const segment = accumulator[accumulator.length - 1]\n      if (segment.end === interval.begin && segment.type === interval.type) {\n\n        segment.end = interval.end\n\n      } else {\n\n        accumulator.push(interval)\n\n      }\n      return accumulator\n\n    },\n    weldedRuler\n  )\n\n  return weldedRuler\n\n}\n"]}